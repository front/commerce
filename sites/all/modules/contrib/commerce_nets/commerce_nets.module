<?php

/**
 * @file
 * Enables users to pay using Nets Netterminal
 *
 * Made for use with 'Drupal Commerce' ( http://www.drupalcommerce.org/ )
 *
 * Creator: Rino AndrÃ© Johnsen AKA 'The Half-Code Prince'
 *   - Mail: rino@nymedia.no
 *
 * Code style: Drupal standard
 *
 * Kortnummer for testing:
 * - VISA 4925000000000004 - 11 - 11 - 123
 * - MC   5413000000000000 - 11 - 11 - 123
 *
 * ID for testing:
 * - 11000324
 *
 * Token for testing:
 * - pH=6?8Kj
 */

/*******************************************************************************
 * Hook Functions                                                              *
 *******************************************************************************/

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_nets_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_nets'] = array(
    'title' => t('Credit card payment (VISA/MASTERCARD)'),
    'description' => t('Nets - Pay with credit card.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/*******************************************************************************
 * Callback Functions                                                          *
 *******************************************************************************/

/**
 * Payment method callback: settings form.
 */
function commerce_nets_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $default_currency = variable_get('commerce_default_currency', 'NOK');

  $settings = (array) $settings + array(
    'merchantid' => '',
    'netstoken' => '',
    'currency_code' => in_array($default_currency, array_keys(commerce_nets_currencies())) ? $default_currency : 'NOK',
    'language' => 'no_NO',
    'server' => 'test',
    'payment_action' => 'sale',
  );

  $form['merchantid'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID issued by Nets'),
    '#description' => t('Enter merchant ID issued by Nets.'),
    '#default_value' => $settings['merchantid'],
    '#required' => TRUE,
  );
  $form['netstoken'] = array(
    '#type' => 'textfield',
    '#title' => t('Nets token issued by Nets'),
    '#description' => t('Enter the Nets token issued by Nets.'),
    '#default_value' => $settings['netstoken'],
    '#required' => TRUE,
  );
  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Currency code'),
    '#description' => t('Transactions can only be processed in one of the listed currencies.'),
    '#options' => commerce_nets_currencies(),
    '#default_value' => $settings['currency_code'],
  );
  $form['language'] = array(
    '#type' => 'select',
    '#title' => t('Nets terminal page language'),
    '#options' => commerce_nets_languages(),
    '#default_value' => $settings['language'],
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('Nets server'),
    '#options' => array(
      'test' => ('Test - use for testing, requires a test account'),
      'live' => ('Live - use for processing real transactions'),
    ),
    '#default_value' => $settings['server'],
  );
  $form['payment_action'] = array(
    '#type' => 'radios',
    '#title' => t('Payment action'),
    '#options' => array(
      'sale' => t('Sale - authorize and capture the funds at the time the payment is processed'),
      'authorization' => t('Authorization - reserve funds on the card (will be captured when "Order Status" is set from "Pending" to "Completed")'),
    ),
    '#default_value' => $settings['payment_action'],
  );

  return $form;
}

/**
 * Payment method callback: submit form.
 */
function commerce_nets_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Merge in values from the order.
  if (!empty($order->data['commerce_nets'])) {
    $pane_values += $order->data['commerce_nets'];
  }

  return $form;
}

function commerce_nets_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_nets'] = $pane_values;
}

/**
 * Payment method callback: redirect form.
 */
function commerce_nets_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['netstoken'])) {
    drupal_set_message(t('Nets is not configured for use.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],
  );

  // We are going to need this later in a state we dont have access to $settings or $form.
  variable_set('nets_payment_action', $payment_method['settings']['payment_action']);

  return commerce_nets_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Payment method callback: redirect form return validation.
 *
 * @func
 *   The sale/authorization request will deploy if the register request returns OK. If not, go back.
 *
 * @param $transactionId
 *   The transactionID returned from Nets
 *
 * @param $responseCode
 *   The responseCode returned from Nets
 *
 * @param $webshopParameter
 *   The webshopParameter returned from Nets
 */
function commerce_nets_redirect_form_validate($order, $payment_method) {
  $transactionId = '';
	if (isset($_GET['transactionId'])) {
  	$transactionId = $_GET['transactionId'];
	}

	$responseCode = '';
	if (isset($_GET['responseCode'])) {
  	$responseCode = $_GET['responseCode'];
	}

	// Not using this atm, but is catching it - we may need it later.
	$webshopParameter = '';
	if (isset($_GET['webshopParameter'])) {
  	$webshopParameter = $_GET['webshopParameter'];
	}

  // If the user does end up returning at the success URL with a failed payment, go back.
  if ($responseCode != 'OK') {
  	// Logging the error
	  watchdog('commerce_nets', 'Customer returned from Nets with the following POST:<pre>' . check_plain(print_r($responseCode, TRUE)) . '</pre>', array(), WATCHDOG_ERROR);
		return FALSE;
	}
	elseif($responseCode == 'OK') {
		return commerce_nets_sale_form($order, $transactionId, $payment_method);
	}
}

/*******************************************************************************
 * Module Functions                                                            *
 *******************************************************************************/

/**
 * Builds a Website Payments Standard form from an order object.
 *
 * @func
 *   Keeping this nice and clean. Normally I would wrap this up in a class,
 *   but since more people than me (the author) that will use this code, I set
 *   parameters here so they are easily editable for others.
 *
 * @param $order
 *   The fully loaded order being registered at Nets.
 *
 * @return
 *   A renderable form array.
 */
function commerce_nets_order_form($form, &$form_state, $order, $settings) {
	include_once(drupal_get_path('module', 'commerce_nets') .'/class/ClassOrder.php');
	include_once(drupal_get_path('module', 'commerce_nets') .'/class/ClassTerminal.php');
	include_once(drupal_get_path('module', 'commerce_nets') .'/class/ClassRegisterRequest.php');
	include_once(drupal_get_path('module', 'commerce_nets') .'/class/ClassEnvironment.php');
	include_once(drupal_get_path('module', 'commerce_nets') .'/class/ClassCustomer.php');
	include_once(drupal_get_path('module', 'commerce_nets') .'/class/ClassItem.php');
  include_once(drupal_get_path('module', 'commerce_nets') .'/class/ClassArrayOfItem.php');

  // Gather info that was entered in 'Billing Information'
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Is this information custom from front or not?
  $customerWrapper = $wrapper->commerce_customer_billing->commerce_customer_address->value();

  // Ensure a default value for the payment_method setting.
  $settings += array('payment_method' => '');

	####  SETUP  ####
	$merchantId = $settings['merchantid'];
	$token = $settings['netstoken'];
	$wsdl = commerce_nets_wsdl_url($settings['server']);
	$terminal = commerce_nets_server_url($settings['server']);

  ####  PARAMETERS IN ORDER  ####
	$amount = $wrapper->commerce_order_total->amount->value(); // Required parameter
	$currencyCode = $settings['currency_code']; // Required parameter
	$force3DSecure = null; // Optional parameter
	$orderNumber = $order->order_id; // Required parameter
	$UpdateStoredPaymentInfo = null; // Optional parameter

	####  PARAMETERS IN Environment  ####
	$Language = null; // Optional parameter
	$OS = null; // Optional parameter
	$WebServicePlatform = 'PHP5'; // Required parameter

	####  PARAMETERS IN TERMINAL  ####
	$autoAuth = null; // Optional parameter
	$paymentMethodList = null; // Optional parameter
	$language = $settings['language']; // Optional parameter
	$orderDescription = null; // Optional parameter
	$redirect_url = $settings['return']; // Required parameter
	$redirectOnError = $settings['cancel_return']; // Optional parameter

	####  PARAMETERS IN REGISTER REQUEST  ####
	$AvtaleGiro = null; // Optional parameter
	$CardInfo = null; // Optional parameter
	$description = null; // Optional parameter
	$DnBNorDirectPayment = null; // Optional parameter
	$Environment = null; // Optional parameter
	$MicroPayment = null; // Optional parameter
	$serviceType = null; // Optional parameter: null ==> default = "B" <=> BBS HOSTED
	$Recurring = null; // Optional parameter
	//$transactionId = null; // Optional parameter
  // Format the transactionId as DDMMYYYY0000001
  $transactionId = date('dmHi') . substr(date('s'), 0, 1) . str_pad($wrapper->order_number->value(), 15 - 9, '0', STR_PAD_LEFT);
	$transactionReconRef = null; // Optional parameter

	####  PARAMETERS IN CUSTOMER  ####
	$customerAddress1 = $customerWrapper['thoroughfare']; // Optional parameter (required if DnBNorDirectPayment)
	$customerAddress2 = ""; // Optional parameter
	$customerCompanyName = $customerWrapper['country']; // Optional parameter
	$customerCompanyRegistrationNumber = null; // Optional parameter
	$customerCountry = $customerWrapper['country']; // Optional parameter
	$customerFirstName = $customerWrapper['first_name']; // Optional parameter (required if DnBNorDirectPayment)
	$customerLastName = $customerWrapper['last_name']; // Optional parameter (required if DnBNorDirectPayment)
	$customerNumber = $order->uid; // Optional parameter
	$customerEmail = $order->mail; // Optional parameter
	$customerPhoneNumber = null; // Optional parameter
	$customerPostcode = $customerWrapper['postal_code']; // Optional parameter (required if DnBNorDirectPayment)
	$customerSocialSecurityNumber = null; // Optional parameter
	$customerTown = $customerWrapper['locality']; // Optional parameter (required if DnBNorDirectPayment)

	####  ENVIRONMENT OBJECT  ####
	$Environment = new Environment(
	  $Language,
	  $OS,
	  $WebServicePlatform
	);

	####  TERMINAL OBJECT  ####
	$Terminal = new Terminal(
	  $autoAuth,
	  $paymentMethodList,
	  $language,
	  $orderDescription,
	  $redirectOnError,
	  $redirect_url
	);

	$ArrayOfItem = null; // no goods for Klana ==> normal transaction

	####  CUSTOMER OBJECT  ####
	$Customer = new Customer(
	  $customerAddress1,
	  $customerAddress2,
	  $customerCompanyName,
	  $customerCompanyRegistrationNumber,
	  $customerCountry,
	  $customerNumber,
	  $customerEmail,
	  $customerFirstName,
	  $customerLastName,
	  $customerPhoneNumber,
	  $customerPostcode,
	  $customerSocialSecurityNumber,
	  $customerTown
	);

	####  ORDER OBJECT  ####
	$Order = new Order(
	  $amount,
	  $currencyCode,
	  $force3DSecure,
	  $ArrayOfItem,
	  $orderNumber,
	  $UpdateStoredPaymentInfo
	);


	####  START REGISTER REQUEST  ####
	$RegisterRequest = new RegisterRequest(
	  $AvtaleGiro,
	  $CardInfo,
	  $Customer,
	  $description,
	  $DnBNorDirectPayment,
	  $Environment,
	  $MicroPayment,
	  $Order,
	  $Recurring,
	  $serviceType,
	  $Terminal,
	  $transactionId,
	  $transactionReconRef
	);


	####  ARRAY WITH REGISTER PARAMETERS  ####
	$InputParametersOfRegister = array (
    "token" => $token,
    "merchantId" => $merchantId,
    "request" => $RegisterRequest
	);

	/**
	 *  Ready to deploy register request to Nets server.
	 *
	 *	                           /\
   *                            /  \
   *                       ||  /    \
   *                       || /______\
   *                       |||        |
   *                      |  |  NETS  |
   *                      |  |        |
   *                      |__|________|
   *                      |___________|
   *                      |  |        |
   *                      |__|   ||   |\
   *                       |||   ||   | \
   *                      /|||   ||   |  \
   *                     /_|||...||...|___\
   *                       |||::::::::|
   *                       || \::::::/     $InputParametersOfRegister
   *                       ||  ||__||      ________    ______________
   *                       ||    ||                \  /
   *                       ||     \\_______________/ /
   *        _______________||______`----------------'
	 *
	 */
	try
	{
	  if (strpos($_SERVER["HTTP_HOST"], 'uapp') > 0) {
		  // Creating new client having proxy
		  $client = new SoapClient($wsdl, array('proxy_host' => "isa4", 'proxy_port' => 8080, 'trace' => true,'exceptions' => true));
	  }
	  else {
		  // Creating new client without proxy
		  $client = new SoapClient($wsdl, array('trace' => true,'exceptions' => true ));
	  }

	  $OutputParametersOfRegister = $client->__call('Register' , array("parameters"=>$InputParametersOfRegister));

	  // RegisterResult
	  $RegisterResult = $OutputParametersOfRegister->RegisterResult;

	  $terminal_parameters = "?merchantId=". $merchantId . "&transactionId=" .  $RegisterResult->TransactionId;
	  $process_parameters = "?transactionId=" .  $RegisterResult->TransactionId;

	  // Send costumer to Nets terminal
	  $form['#action'] = $terminal.$terminal_parameters;
  	$form['submit'] = array(
	    '#type' => 'submit',
	    '#value' => t('Proceed to Nets'),
  	);

  return $form;

	}
	catch (SoapFault $fault)
	{
	  // Printing errors from the communication. This can be modified to make a nice error screen for the users.
	  // I (the author) is not a user atm, so I need the cryptic stuff :)
	  echo "<h3><font color='red'>EXCEPTION IN REGISTER CALL:</font></h3>";
	  echo "<pre>";
	  print_r($fault);
	  echo "</pre>";

	  // Logging the error
	  watchdog('commerce_nets', 'Webservice Nets returned not OK from register request. Data:<pre>' . check_plain(print_r($fault, TRUE)) . '</pre>', array(), WATCHDOG_ERROR);
	}
}

/**
 * Builds a Nets Payments Standard order from an order object.
 *
 * @param $transactionId
 *   The transaction id returned from Nets after sending a register request.
 *
 * @return
 *   TRUE/FALSE - TRUE results in a completed payment. FALSE results in moving a page back to "review order" with an error message.
 */
function commerce_nets_sale_form($order, $transactionId, $payment_method) {
	include_once(drupal_get_path('module', 'commerce_nets') .'/class/ClassProcessRequest.php');

	$wrapper = entity_metadata_wrapper('commerce_order', $order);

	####  SETUP  ####
	$merchantId = $payment_method['settings']['merchantid'];
  $token = $payment_method['settings']['netstoken'];
  $transactionAmount = "";
	$transactionReconRef = "";
	$description = "";
	$wsdl = commerce_nets_wsdl_url($payment_method['settings']['server']);
	$operation = commerce_nets_payment_action();

	####  PROCESS OBJECT  ####
	$ProcessRequest = new ProcessRequest(
	  $description,
	  $operation,
	  $transactionAmount,
	  $transactionId,
	  $transactionReconRef
	);

	$InputParametersOfProcess = array(
	  "token" => $token,
	  "merchantId" => $merchantId,
	  "request" => $ProcessRequest
	);

	/**
	 *  Ready to deploy sale/authorization request to Nets server.
	 *
	 *	                           /\
   *                            /  \
   *                       ||  /    \
   *                       || /______\
   *                       |||        |
   *                      |  |  NETS  |
   *                      |  |        |
   *                      |__|________|
   *                      |___________|
   *                      |  |        |
   *                      |__|   ||   |\
   *                       |||   ||   | \
   *                      /|||   ||   |  \
   *                     /_|||...||...|___\
   *                       |||::::::::|
   *                       || \::::::/     $InputParametersOfProcess
   *                       ||  ||__||      ________    ______________
   *                       ||    ||                \  /
   *                       ||     \\_______________/ /
   *        _______________||______`----------------'
	 *
	 */

	try
	{
	  if (strpos($_SERVER["HTTP_HOST"], 'uapp') > 0) {
		  // Creating new client having proxy
		  $client = new SoapClient($wsdl, array('proxy_host' => "isa4", 'proxy_port' => 8080, 'trace' => true,'exceptions' => true));
	  }
	  else {
		  // Creating new client without proxy
		  $client = new SoapClient($wsdl, array('trace' => true,'exceptions' => true ));
	  }

	  $OutputParametersOfProcess = $client->__call('Process' , array("parameters"=>$InputParametersOfProcess));

	  $ProcessResult = $OutputParametersOfProcess->ProcessResult;

	  $process_parameters = "?transactionId=" .  $ProcessResult->TransactionId;

	  if ($ProcessResult->ResponseCode == "OK"){
	  	commerce_nets_transaction($payment_method, $order, $ProcessResult->TransactionId);
	  }
	}
	catch (SoapFault $fault) {
	  // Printing errors from the communication. This can be modified to make a nice error screen for the users.
	  // I (the author) is not a user atm, so I need the cryptic stuff :)
	  echo "<h3><font color='red'>EXCEPTION IN SALE/AUTHORIZATION CALL:</font></h3>";
	  echo "<pre>";
	  print_r($fault);
	  echo "</pre>";

	  // Logging the error
	  watchdog('commerce_nets', 'Webservice Nets returned not OK from sale/authorizationrequest. Data:<pre>' . check_plain(print_r($fault, TRUE)) . '</pre>', array(), WATCHDOG_ERROR);

	  // Go back!
	  return FALSE;
	}
}

/**
 * Creates an payment transaction.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $name
 *   The name entered on the submission form.
 */
function commerce_nets_transaction($payment_method, $order, $remoteTransactionId) {
  $transaction = commerce_payment_transaction_new('commerce_nets', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  $transaction->message = 'Result: OK';
  $transaction->remote_id = $remoteTransactionId;

  if (commerce_nets_payment_action() == 'SALE') {
  	$order->status = 'completed';
  	$transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }
  elseif (commerce_nets_payment_action() == 'AUTH') {
  	$order->status = 'pending';
  	$transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  }

  commerce_payment_transaction_save($transaction);
  commerce_order_save($order);
}

/**
 * Returns the URL to the specified Nets server.
 *
 * @param $server
 *   Either test or live indicating which server to get the URL for.
 *
 * @return
 *   The URL to use to submit requests to the Nets server.
 */
function commerce_nets_server_url($server) {
  switch ($server) {
    case 'test':
      return 'https://epayment-test.bbs.no/terminal/default.aspx';
    case 'live':
      return 'https://epayment.bbs.no/Terminal/default.aspx';
  }
}

/**
 * Returns either 'sale' or 'authorization' based on what is set in settings
 *
 * Might seems unnecessary to do this, but its smart if we need to change some properties in the module later.
 */
function commerce_nets_payment_action() {
  switch (variable_get('nets_payment_action', '')) {
    case 'sale':
      return 'SALE';
    case 'authorization':
      return 'AUTH';
  }
}

/**
 * Returns the URL to the specified Nets wsdl server.
 *
 * @param $server
 *   Either test or live indicating which server to get the URL for.
 *
 * @return
 *   The URL to use to submit requests to the Nets server.
 */
function commerce_nets_wsdl_url($server) {
  switch ($server) {
    case 'test':
      return 'https://epayment-test.bbs.no/Netaxept.svc?wsdl';
    case 'live':
      return 'https://epayment.bbs.no/netaxept.svc?wsdl';
  }
}

/**
 * Returns an array of all possible currency codes.
 *
 * @return
 *   Its only 'NOK' and 'USD' for now, but we can add more here later and these codes will pop up in the settings menu! Epic stuff...
 */
function commerce_nets_currencies() {
  return drupal_map_assoc(array('NOK', 'USD'));
}

/**
 * Returns an array of all possible language codes.
 *
 * @return
 *   The language code to set on Nets terminal.
 */
function commerce_nets_languages() {
  return drupal_map_assoc(array('no_NO', 'sv_SE', 'da_DK', 'de_DE', 'fi_FI', 'en_GB'));
}
