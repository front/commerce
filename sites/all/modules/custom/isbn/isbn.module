<?php

/**
 * @file
 *  Maintains a consistant relationship between nodes and ISBNs.
 */

/**
 * Implements hook_field_info().
 */
function isbn_field_info() {
  return array(
    'isbn' => array(
      'label' => 'ISBN',
      'description' => t('This field stores and renders ISBN numbers.'),
      'default_widget' => 'isbn_textfield',
      'default_formatter' => 'isbn_default',
      'property_type' => 'text',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 */
function isbn_field_validate($obj_type, $object, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {

    $isbn = isbn_clean_data($item['isbn']);

    if ($isbn != '' && !isbn_check_10($isbn) && !isbn_check_13($isbn)) {
      if (strlen($isbn) == 10 && !isbn_check_10($isbn)) {
        $message = t('"%isbn" isn\'t a valid 10 digit ISBN number', array('%isbn' => $isbn));
      }

      if (strlen($isbn) == 13 && !isbn_check_13($isbn)) {
        $message = t('"%isbn" isn\'t a valid 13 digit ISBN number', array('%isbn' => $isbn));
      }

      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => "isbn_invalid",
        'message' => $message,
      );
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function isbn_menu() {
  $items = array();
  $items['isbn'] = array(
    'title' => 'ISBN Conversion',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('isbn_form'),
    'access arguments' => array('access content'),
    'weight' => 7,
  );
  return $items;
}

/**
 * Implements hook_field_widget_error().
 */
function isbn_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_content_is_empty().
 */
function isbn_field_is_empty($item, $field) {
  if (empty($item['isbn'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 *
 */
function isbn_field_formatter_info() {
  $formats = array(
    'isbn_default' => array(
      'label' => t('Not formated ISBN'),
      'description' => t('Display the ISBN number without format.'),
      'field types' => array('isbn'),
    ),
  );
  return $formats;
}

/**
 * Implements hook_field_formatter_view().
 */
function isbn_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'isbn_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => isbn_clean_data($item['isbn']));
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function isbn_field_widget_info() {
  return array(
    'isbn_textfield' => array(
      'label' => t('Text field'),
      'field types' => array('isbn'),
      'settings' => array('size' => 60),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function isbn_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['size'] = array(
    '#type' => 'textfield',
    '#title' => t('Size of textfield'),
    '#default_value' => $settings['size'],
    '#required' => TRUE,
    '#element_validate' => array('_element_validate_integer_positive'),
  );
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function isbn_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = $base;
  $element['isbn'] = $base + array(
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['isbn']) ? $items[$delta]['isbn'] : NULL,
    '#size' => $instance['widget']['settings']['size'],
    '#prefix' => '<div class="text-full-wrapper">',
    '#suffix' => '</div>',
  );
  return $element;
}

function isbn_clean_data($isbn) {
  return preg_replace('/([^a-zA-Z0-9]*)/', "", $isbn);
}

function isbn_check_10($isbn) {
  if (strlen($isbn) < 10) {
    return 0;
  }

  $check = 0;
  for ($i = 0; $i < 9; $i++) {
    $check += (10 - $i) * substr($isbn, $i, 1);
  }
  $t = substr($isbn, 9, 1); // tenth digit (aka checksum or check digit)
  $check += ($t == 'x' || $t == 'X') ? 10 : $t;
  return $check % 11 == 0;
}

function isbn_check_13($isbn){
  if (strlen($isbn) < 13) {
    return 0;
  }
  $check = 0;
  for ($i = 0; $i < 13; $i+=2) $check += substr($isbn, $i, 1);
  for ($i = 1; $i < 12; $i+=2) $check += 3 * substr($isbn, $i, 1);
  return $check % 10 == 0;
}