<?php
/**
 * @file
 * Integrates Bring with Commerce Shipping.
 */

/**
 * Implements hook_menu().
 */
function commerce_bring_menu() {
  $items = array();
  
  $items['admin/commerce/config/shipping/methods/bring/edit'] = array(
    'title' => t('Edit'),
    'description' => t('Configure the Bring shipping method.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_bring_settings_form'),
    'access arguments' => array('administer shipping'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );
  
  return $items;
}

/*
 * Form callback where we build settings from used to collect Bring Api and to enable supported shipping services.
 */
function commerce_bring_settings_form($form, &$form_state) {
  
  $form['rate'] = array(
    '#type' => 'fieldset',
    '#title' => t('Rate request settings'),
    '#collapsible' => TRUE,
  ); 
  
  $form['rate']['commerce_bring_max_package_weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum package weight'),
    '#description' => t('If the total weight of an order exceeds the maximum package weight, multiple packages will be used in the rate request.'),
    '#default_value' => variable_get('commerce_bring_max_package_weight', '1500'),
    '#field_suffix' => t('g'),
    '#size' => 10,
  );
  
  $form['rate']['commerce_bring_rate_currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#options' => commerce_currency_code_options_list(),
    '#default_value' => variable_get('commerce_bring_rate_currency_code', commerce_default_currency()),
  );
  
  $form['services'] = array(
    '#type' => 'fieldset',
    '#title' => t('Enable Bring shipping services'), 
	'#collapsible' => TRUE,
  );
  
  $form['shop_address'] = array(
    '#type' => 'fieldset',
    '#title' => t('Shop information'),
    '#collapsible' => TRUE,
  );
  
  $form['shop_address']['shop_name'] = array(
    '#type' => 'textfield',
    '#title' => t('The shop name'),
    '#default_value' => variable_get('shop_name', 'Shop Name'),
    '#size' => 10,
  );

  $form['shop_address']['shop_zipcode'] = array(
    '#type' => 'textfield',
    '#title' => t('The shop zipcode'),
    '#default_value' => variable_get('shop_zipcode', ''),
  	'#size' => 10,
  );
  
  // Get an array of service elements.
  $package_services = commerce_bring_package_service();

  foreach ($package_services as $key => $values) {
    $form['services'][strtr($key, ' ', '-')] = array(
      '#type' => 'checkboxes',
      '#title' => check_plain($key),
      '#options' => $values,
      '#default_value' => variable_get('product_type'),
    );
  }
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuraion'),
  );
  
  return $form;  
}

/*
 * Implement settings_form_submit().
 */
function commerce_bring_settings_form_submit($form, &$form_state) {
  // Save informatin about shop.
  variable_set('shop_zipcode', $form_state['input']['shop_zipcode']);
  variable_set('shop_name', $form_state['input']['shop_name']);
  
  // Save information about rate used for request.
  variable_set('commerce_bring_max_package_weight', $form_state['input']['commerce_bring_max_package_weight']);
  variable_set('commerce_bring_rate_currency_code', $form_state['input']['commerce_bring_rate_currency_code']);
  
  // Save information about Bring Products.
  if (isset($form_state['input']['Bring-Products'])) {
    $temp_products_id = array();
    foreach ($form_state['input']['Bring-Products'] as $product_code) {
      if (isset($form_state['input']['Bring-Products'][$product_code])) {
        $temp_products_id[] = $product_code;
        variable_set('product_type', $temp_products_id);
      }
    }
  }
  drupal_set_message(t('Your configuration has been saved.'), 'status');
  
  $form_state['redirect'] = 'admin/commerce/config/shipping/methods';
}

function commerce_bring_commerce_shipping_method_info() {
  $shipping_methods = array();
  
  $shipping_methods['bring'] = array(
    'title' => t('Bring Commerce'),
    'description' => t('Quote rates for any product service supported by Bring.'),
  );
  
  return $shipping_methods;
}

function commerce_bring_commerce_shipping_service_info() {
  $products = variable_get('product_type');
  $bring_products = commerce_bring_package_service();
  
  $shipping_services = array();
  foreach ($products as $service) {
    $title = $bring_products['Bring Products'][$service];
    
    $shipping_services[$service] = array(
      'title' => $title,
      'display_title' => $title,
      'shipping_method' => 'bring',
      'callbacks' => array(
        'rate' => 'commerce_bring_service_rate',
      ),
    );  
  }
  
  return $shipping_services;
}

/*
 * Shipping service callback returns Bring calculated shipping rates for an order.
 */
function commerce_bring_service_rate($shipping_service, $order) {
  // Check if there is a to zipcode and then make the request.
  $start_request = FALSE;
  $rate_request_element = commerce_bring_build_rate_request($order);
  if ($rate_request_element && strstr($rate_request_element, '&to=')) {
    $start_request = TRUE;  
    if ($start_request === TRUE) {
      $bring_response = commerce_bring_api_request($rate_request_element, t('Request for order: @order_number', array('@order_number' => $order->order_number)));
    }
    $bring_products = $bring_response->Product;
    $shipping_id = $shipping_service['name'];
    
    foreach ($bring_products as $product) {
      if ($product->ProductId == $shipping_id) {
         return array(
         	'amount' => $product->Price->PackagePriceWithoutAdditionalServices->AmountWithVAT * 100,
            'currency_code' => 'NOK',
            'data' => array(),
          );   
      }
    }
  }
}

function commerce_bring_build_rate_request($order) {
  if (isset($order->shipping_address_ajax)) {
    $shipping_address = $order->shipping_address_ajax['commerce_customer_address']['und'][0];
  }
  elseif ($order->commerce_customer_shipping) {
    $shipping_profile = commerce_customer_profile_load($order->commerce_customer_shipping['und'][0]['profile_id']);
    if ($shipping_profile) {
      $shipping_address = $shipping_profile->commerce_customer_address['und'][0]; 
    }
  }  
 
  if (isset($shipping_address['postal_code'])) {
    $to_zipcode = $shipping_address['postal_code'];
  }
  
  $rate_request_element = '?';
  
  // Get the total weight of the order in grams.
  $weight = commerce_physical_order_weight($order, 'g');
  $max_weight = variable_get('commerce_bring_max_package_weight', '');
  $packages = 2;

  $volume = commerce_physical_order_volume($order, 'cm');
  $volume_packages = 2;
  $total_volume = 1;

  if ($volume['volume'] > 0) {
    $total_volume = $total_volume * (floatval($volume['volume'] / 1000));
  }
  else {
    $total_volume = 0;
  }

  $rate_request_element .= 'weightInGrams=' . $weight['weight'] . '&length=&width=&height=&volume=' . $total_volume;
  
  $bring_products = variable_get('product_type', '');
  $prod = '';
  foreach ($bring_products as $bring_product) {
    $prod .= '&product=' . $bring_product;
  }
  
  if (isset($to_zipcode)) {
    $to = '&to=' . $to_zipcode;  
  }
  else {
    $to = '';
  }
  
  $from_zipcode = '&from=' . variable_get('shop_zipcode', '');
  $rate_request_element .= $from_zipcode . $to . $prod;

  return $rate_request_element;
}

/*
 * Bring available products.
 */
function commerce_bring_package_service() {
    $package_services = array(
    'Bring Products' => array(
      'SERVICEPAKKE' => t('Klimanøytral Servicepakke'),
      'PA_DOREN' => t('På Døren'),
      'BPAKKE_DOR-DOR' => t('Bedriftspakke'),
      'EKSPRESS07' => t('Bedriftspakke Ekspress-Over natten 07'),
      'EKSPRESS09' => t('Bedriftspakke Ekspress-Over natten 09'),
      //'A-POST' => t('A-Prioritert'),
      //'B-POST' => t('B-Økonomi'),
      //'QUICKPACK_SAMEDAY' => t('QuickPack SameDay'),
      'QUICKPACK_OVER_NIGHT_0900' => t('Quickpack Over Night 0900'),
      'QUICKPACK_OVER_NIGHT_1200' => t('Quickpack Over Night 1200'),
      'QUICKPACK_DAY_CERTAIN' => t('Quickpack Day Certain'),
      'QUICKPACK_EXPRESS_ECONOMY' => t('Quickpack Express Economy'),
      'CARRYON BUSINESS NORWAY' => t('CarryOn Business Norway'),
      'CARRYON BUSINESS SWEDEN' => t('CarryOn Business Sweden'),
      'CARRYON BUSINESS DENMARK' => t('CarryOn Business Denmark'),
      'CARRYON BUSINESS FINLAND' => t('CarryOn Business Finland'),
      'CARRYON HOMESHOPPING NORWAY' => t('CarryOn Homeshopping Norway'),
      'CARRYON HOMESHOPPING SWEDEN' => t('CarryOn Homeshopping Sweden'),
      'CARRYON HOMESHOPPING DENMARK' => t('CarryOn Homeshopping Denmark'),
      'CARRYON HOMESHOPPING FINLAND' => t('CarryOn Homeshopping Finland'),
      'HOMEDELIVERY_CURBSIDE_DAG' => t('HomeDelivery CurbSide'),
      'COURIER_VIP' => t('Bud VIP'),
      'COURIER_1H' => t('Bud 1 time'),
      'COURIER_2H' => t('Bud 2 timer'),
      'COURIER_4H' => t('Bud 4 timer'),
      'COURIER_6H' => t('Bud 6 timer'),
    ),
  );
  
  return $package_services;
}

function commerce_bring_api_request($query_string, $message = '') {

  if (!function_exists('curl_init')) {
    die(t('Sorry cURL is not installed.'));
  }
  
  // Array information for the request. 
  $header = array();
  $header[] = 'Content-type: text/xml; charset=utf-8';
  $header[] = 'Content-length: ' . strlen($query_string);
  
  // Post the XML to the XML Processor.
  $timeout = 20;
  // This URL is used to get response with all Bring data.
  //$url = 'http://fraktguide.bring.no/fraktguide/products/all.xml' . $query_string;
  $url = 'http://fraktguide.bring.no/fraktguide/products/price.xml'.$query_string;
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
  
  $result = curl_exec($ch);
  curl_close($ch);
  if (!empty($result)) {
    $response = new SimpleXMLElement($result);
    $response->asXML();
    return $response;
  }
  else {
    return FALSE;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function commerce_bring_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'commerce_checkout_form_checkout') {
    $form['commerce_shipping']['bring_request'] = array(
      '#type' => 'button',
      '#value' => t('Calculate Shipping'),
      '#ajax' => array(
        'callback' => 'commerce_bring_request_callback',
      	'wrapper' => 'commerce-shipping-bring',
      	'method' => 'replace',
      	'effect' => 'fade',
      ),
    );
    $form['commerce_shipping']['#prefix'] = "<div id='commerce-shipping-bring'>";
    $form['commerce_shipping']['#suffix'] = "</div>";
    $form['commerce_shipping']['message'] = array(
      '#markup' => '<div>' . t('The Shipping service is mandatory.') . '<br />' . t('Please fill all mandatory fields in this form an then press "Calculate Shipping" button to get an shipping price.') .'<br /><strong>' . t('If is not working please contact us to resolve any issues with your order.') . '</strong></div>',
      '#weight' => 0,
    );
  }  
}

function commerce_bring_request_callback($form, $form_state) {
  $checkout_pane = array();

  $order = $form_state['order'];
  $country = $form_state['input']['customer_profile_shipping']['commerce_customer_address']['und'][0]['country'];

  if ($country == 'NO') {
    $panes = commerce_checkout_panes();
    $checkout_pane = $panes['commerce_shipping'];
  
    if (function_exists('commerce_shipping_pane_checkout_form')) {
      $pane_shipping = commerce_shipping_pane_checkout_form($form, $form_state, $checkout_pane, $order);
    }
  
    $order->shipping_address_ajax = $form_state['input']['customer_profile_shipping'];
      
    $f = drupal_get_form('commerce_shipping_pane_checkout_form', $checkout_pane, $order);
  
    $form['commerce_shipping']['shipping_rates'] = $f['shipping_rates'];
    $form['commerce_shipping']['shipping_service'] = $f['shipping_service'];
    $form['commerce_shipping']['service_details'] = $f['service_details'];
    
    if ($form['commerce_shipping']['shipping_rates'] && $form['commerce_shipping']['shipping_service'] && $form['commerce_shipping']['service_details']) {
      unset($form['commerce_shipping']['service_details']);  
      unset($form['commerce_shipping']['message']);
    }
    
    return drupal_render($form['commerce_shipping']);
  }
  else {
    
    $form['commerce_shipping']['message']['#markup'] = '<div class="only-norway">' . t('This shipping method is only for Norway') . '</div>';
    
    return drupal_render($form['commerce_shipping']);
  
  }
}